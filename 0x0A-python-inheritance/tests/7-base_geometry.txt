
# 7-base_geometry.txt

=======================
How to Use 7-base_geometry.py
=======================

This module defines a class ``BaseGeometry`` .

Instantiation
=============


    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

Checking integer validator for type error
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

Checking for integer = 0
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

Checking for integer < 0
    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ...
    ValueError: distance must be greater than 0

Checking for integer == 0:
	  >>> b.integer_validator("integer", 0)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

Checking for non-integer types:
	  >>> b.integer_validator("bool", True)
	  Traceback (most recent call last):
          ...
          TypeError: bool must be an integer
	  >>> b.integer_validator("float", 1.5)
          Traceback (most recent call last):
          ...
          TypeError: float must be an integer
	  >>> b.integer_validator("complex", complex(1, 1))
          Traceback (most recent call last):
          ...
          TypeError: complex must be an integer
	  >>> b.integer_validator("string", "hello")
          Traceback (most recent call last):
          ...
          TypeError: string must be an integer
	  >>> b.integer_validator("tuple", (1, 2))
          Traceback (most recent call last):
          ...
          TypeError: tuple must be an integer
	  >>> b.integer_validator("list", [1, 2, 3])
	  Traceback (most recent call last):
          ...
          TypeError: list must be an integer
	  >>> b.integer_validator("dict", {"key": "value"})
          Traceback (most recent call last):
          ...
          TypeError: dict must be an integer
	  >>> b.integer_validator("set", {"hello", "world"})
          Traceback (most recent call last):
          ...
          TypeError: set must be an integer
	  >>> b.integer_validator("frozenset", frozenset(["hello", "world"]))
          Traceback (most recent call last):
          ...
          TypeError: frozenset must be an integer
	  >>> b.integer_validator("bytes", b"bytes")
          Traceback (most recent call last):
          ...
          TypeError: bytes must be an integer
	  >>> b.integer_validator("bytearrays", bytearray(b"bytes"))
          Traceback (most recent call last):
          ...
          TypeError: bytearrays must be an integer

Checking for area failure:
	  >>> b = BG()
	  >>> b.area()
	  Traceback (most recent call last):
	  ...
	  Exception: area() is not implemented

Checking too many arguments for area:
	  >>> b.area(1)
	  Traceback (most recent call last):
          ...
	  TypeError: area() takes 1 positional argument but 2 were given
